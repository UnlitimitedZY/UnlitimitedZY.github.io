{"meta":{"title":"Hexo","subtitle":"","description":"","author":"Jasper Chou","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"GpuInterpreterSourceStudyone","slug":"GpuInterpreterSourceStudyone","date":"2020-05-19T06:45:47.000Z","updated":"2020-05-19T06:49:37.385Z","comments":true,"path":"2020/05/19/GpuInterpreterSourceStudyone/","link":"","permalink":"http://yoursite.com/2020/05/19/GpuInterpreterSourceStudyone/","excerpt":"","text":"1.tuple​ tuple 是元组的意思","categories":[],"tags":[]},{"title":"inline const mutable this static ","slug":"inline const mutable this static ","date":"2020-05-16T01:00:00.465Z","updated":"2020-05-16T07:42:33.424Z","comments":true,"path":"2020/05/16/inline const mutable this static /","link":"","permalink":"http://yoursite.com/2020/05/16/inline%20const%20mutable%20this%20static%20/","excerpt":"1.Const: 1.1Const 在函数后面时候：表示这个函数不能更改类中的内容也就是成员变量。 1.2 定义Const 对象： 只能调用Const 函数，非Const对象可以调用Const 函数和非Const 函数","text":"1.Const: 1.1Const 在函数后面时候：表示这个函数不能更改类中的内容也就是成员变量。 1.2 定义Const 对象： 只能调用Const 函数，非Const对象可以调用Const 函数和非Const 函数 1.3 mutable（不稳定 容易改变的意思）与Const 相反 定义了mutable 成员函数 则const 成员函数中就能修改此成员函数2.this :2.1this 编译器负责把这个对象的地址传递给这个成员函数中的一个隐藏的this形参。对于系统来说关于成员的调用都是通过this来调用的是会是一种隐式调用。在普通函数中this相当于指向非const对象的const 指针（const * this）而在const 函数中代表（const Time *const 的this 类型的指针） //如下： class Time { void add_hour(int h); }; Time mytime; mytime.add_hour(&amp;mytime,3) //传递的时候系统会默认传递一个当前的指针回去作为this指针 //this 是一个系统的保留关键字不可显示调用. //静态函数和全局函数是不能使用this指针的 3.static​ 3.1局部静态变量和全局静态变量都保存在静态存储区都是默认不赋予初值的话系统会给予初值0. ​ 3.2static 类成员 存在与整个类中 调用的时候是类名：：static成员变量名或者类名.static成员变量进行操作 ​ 3.3 static 类函数 调用是 类名：：static 类函数或者 类名.static 类函数 都可以使用。在静态成员函数中是不能修改非静态成员的值的 ​ 3.4类中的static声明了后要在cpp 中定义静态成员变量（在此时分配内存只能在一个cpp 中定义那不然重复定义）","categories":[],"tags":[]},{"title":"post_name","slug":"post-name","date":"2020-05-15T13:17:43.000Z","updated":"2020-05-15T13:17:43.225Z","comments":true,"path":"2020/05/15/post-name/","link":"","permalink":"http://yoursite.com/2020/05/15/post-name/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"t1","slug":"t1","date":"2020-05-14T14:17:01.000Z","updated":"2020-05-14T14:34:13.502Z","comments":true,"path":"2020/05/14/t1/","link":"","permalink":"http://yoursite.com/2020/05/14/t1/","excerpt":"","text":"first tag int a printf;","categories":[],"tags":[]},{"title":"article title","slug":"article-title","date":"2020-05-14T10:11:24.000Z","updated":"2020-05-14T10:11:24.406Z","comments":true,"path":"2020/05/14/article-title/","link":"","permalink":"http://yoursite.com/2020/05/14/article-title/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2020-05-14T08:30:19.606Z","updated":"2020-05-14T08:30:19.606Z","comments":true,"path":"2020/05/14/hello-world/","link":"","permalink":"http://yoursite.com/2020/05/14/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new &quot;My New Post&quot; More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[]}