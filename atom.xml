<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-07-24T08:12:53.264Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Jasper Chou</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>letCode</title>
    <link href="http://yoursite.com/2020/07/24/letCode1/"/>
    <id>http://yoursite.com/2020/07/24/letCode1/</id>
    <published>2020-07-24T07:55:52.000Z</published>
    <updated>2020-07-24T08:12:53.264Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h1><p>学校在拍年度纪念照时，一般要求学生按照 非递减 的高度顺序排列。</p><p>请你返回能让所有学生以 非递减 高度排列的最小必要移动人数。</p><p>注意，当一组学生被选中时，他们之间可以以任何可能的方式重新排序，而未被选中的学生应该保持不动。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/height-checker" target="_blank" rel="noopener">https://leetcode-cn.com/problems/height-checker</a></p><p>示例：</p><p>输入：heights = [1,1,4,2,1,3]<br>输出：3<br>解释：<br>当前数组：[1,1,4,2,1,3]<br>目标数组：[1,1,1,2,3,4]<br>在下标 2 处（从 0 开始计数）出现 4 vs 1 ，所以我们必须移动这名学生。<br>在下标 4 处（从 0 开始计数）出现 1 vs 3 ，所以我们必须移动这名学生。<br>在下标 5 处（从 0 开始计数）出现 3 vs 4 ，所以我们必须移动这名学生。</p><pre><code>这道题目中有疑惑点会造成困扰：.关于示例中的4vs1 就一开混淆以为是和原表进行比对，没想到是和上面的两个数组两两比。题目中其实意思是就是比较刷选后和筛选前的数进行对比看几个不一样，文件描述太绕了</code></pre><p>知道问题点之后就简单了先排序之后再进行比对：</p><h2 id="第一种解法"><a href="#第一种解法" class="headerlink" title="第一种解法"></a>第一种解法</h2><p>对与c++ 可以时候Vector 进行数组容器存储这样很方便比对。</p><pre><code class="c++">class Solution {public:    int heightChecker(vector&lt;int&gt;&amp; heights) {        int size = heights.size();        vector&lt;int&gt; vec(heights);   // 这很方便        sort(vec.begin(), vec.end());  //自己关于库函数使用很少以后要多使用        int i = 0;        int j = 0;        int count = 0;        for(i = 0, j = 0; i &lt; size, j &lt; size; i++, j++)  //实验下双小标使用        {            if(heights[i] != vec[j])            {                ++count;            }        }        return count;    }};</code></pre><p>第二种解法：</p><p>直接冒泡排序再检测： c ：（冒泡逐个相临比对排出最大或者最小：如1和2比 ，2和3比， 3和4比）</p><pre><code class="c">int heightChecker(int* heights, int heightsSize){    int *add=calloc(heightsSize,sizeof(int));    int i,j,temp,num=0;    for(i=0;i&lt;heightsSize;i++){        add[i]=heights[i];    }    for(i=0;i&lt;heightsSize;i++){       //代表比较次数        for(j=0;j&lt;heightsSize-i-1;j++){ //代表每次比对            if(heights[j]&gt;heights[j+1]){   //冒泡                temp=heights[j];                heights[j]=heights[j+1];                heights[j+1]=temp;            }        }    }    for(i=0;i&lt;heightsSize;i++){        if(add[i]!=heights[i])            num++;    }    return num;}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目描述：&quot;&gt;&lt;a href=&quot;#题目描述：&quot; class=&quot;headerlink&quot; title=&quot;题目描述：&quot;&gt;&lt;/a&gt;题目描述：&lt;/h1&gt;&lt;p&gt;学校在拍年度纪念照时，一般要求学生按照 非递减 的高度顺序排列。&lt;/p&gt;
&lt;p&gt;请你返回能让所有学生以 非递减 高度
      
    
    </summary>
    
    
    
      <category term="letCode 数组" scheme="http://yoursite.com/tags/letCode-%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>并发并行</title>
    <link href="http://yoursite.com/2020/06/30/%E5%B9%B6%E5%8F%91%E5%B9%B6%E8%A1%8C/"/>
    <id>http://yoursite.com/2020/06/30/%E5%B9%B6%E5%8F%91%E5%B9%B6%E8%A1%8C/</id>
    <published>2020-06-30T02:17:59.000Z</published>
    <updated>2020-06-30T02:41:09.897Z</updated>
    
    <content type="html"><![CDATA[<p>并行是物理时观下的同时执行，而并发是操作系统同线程这个模型抽象之后站在线程的视角上看到的“同时”执行。</p><p>比喻如下：</p><p>并发：早上给女朋友做早餐开两个灶，一会煎鸡蛋一会炒菜。</p><p>并行：早上给女朋友做早餐开两个灶，女朋友帮做两人同时煎鸡蛋和炒菜。</p><p>并发的关键是你有处理多个任务的能力，不一定要同时。<br>并行的关键是你有同时处理多个任务的能力。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;并行是物理时观下的同时执行，而并发是操作系统同线程这个模型抽象之后站在线程的视角上看到的“同时”执行。&lt;/p&gt;
&lt;p&gt;比喻如下：&lt;/p&gt;
&lt;p&gt;并发：早上给女朋友做早餐开两个灶，一会煎鸡蛋一会炒菜。&lt;/p&gt;
&lt;p&gt;并行：早上给女朋友做早餐开两个灶，女朋友帮做两人同时煎鸡蛋和
      
    
    </summary>
    
    
    
      <category term="并发和并行" scheme="http://yoursite.com/tags/%E5%B9%B6%E5%8F%91%E5%92%8C%E5%B9%B6%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>epollselect</title>
    <link href="http://yoursite.com/2020/06/28/epollselect/"/>
    <id>http://yoursite.com/2020/06/28/epollselect/</id>
    <published>2020-06-28T15:06:48.000Z</published>
    <updated>2020-06-29T01:23:54.310Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么要用select和epoll"><a href="#为什么要用select和epoll" class="headerlink" title="为什么要用select和epoll"></a>为什么要用select和epoll</h2><p>当需要确定io是否有数据的时候那这个时候没有 select和epoll 的多路复用技术那要想实现这个功能。</p><p>方法如下：</p><p>​      1  直接recv 函数去接受所有io </p><p>​       2 每个io会单独开个线程</p><p>缺点： 网络io中就算1000个io也就只会有1000个有数据 因此上面两种方法效率很低因此需要多路复用技术。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;为什么要用select和epoll&quot;&gt;&lt;a href=&quot;#为什么要用select和epoll&quot; class=&quot;headerlink&quot; title=&quot;为什么要用select和epoll&quot;&gt;&lt;/a&gt;为什么要用select和epoll&lt;/h2&gt;&lt;p&gt;当需要确定io是否有
      
    
    </summary>
    
    
    
      <category term="epoll Select" scheme="http://yoursite.com/tags/epoll-Select/"/>
    
  </entry>
  
  <entry>
    <title>查漏补缺</title>
    <link href="http://yoursite.com/2020/06/20/%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA/"/>
    <id>http://yoursite.com/2020/06/20/%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA/</id>
    <published>2020-06-20T07:02:48.000Z</published>
    <updated>2020-06-20T08:44:40.630Z</updated>
    
    <content type="html"><![CDATA[<h2 id="lt-等运算符的优先级要大于-赋值运算符因此要注意在同时使用的时候加上括号标识其优先级"><a href="#lt-等运算符的优先级要大于-赋值运算符因此要注意在同时使用的时候加上括号标识其优先级" class="headerlink" title="&lt; 等运算符的优先级要大于= 赋值运算符因此要注意在同时使用的时候加上括号标识其优先级"></a>&lt; 等运算符的优先级要大于= 赋值运算符因此要注意在同时使用的时候加上括号标识其优先级</h2><pre><code class="c++">//example :     int size = 10;    if (size = -1 &lt; 0)     {        //now the size is 1;        //比较语句的顺序如下： 因为&lt;优先级大于= 因此顺序如下 (size= (-1&lt;0))         //(-1&lt;0) result= 1 than the result will give size so the size=1;         printf(&quot;size&quot;);    }//this is rightif((size =-1) &lt;0){    //now the size = -1}</code></pre><h2 id="const-和-define-的区别"><a href="#const-和-define-的区别" class="headerlink" title="const 和#define 的区别"></a>const 和#define 的区别</h2><p><img src="/2020/06/20/%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA/constDefine.png" alt="替换"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;lt-等运算符的优先级要大于-赋值运算符因此要注意在同时使用的时候加上括号标识其优先级&quot;&gt;&lt;a href=&quot;#lt-等运算符的优先级要大于-赋值运算符因此要注意在同时使用的时候加上括号标识其优先级&quot; class=&quot;headerlink&quot; title=&quot;&amp;lt; 等
      
    
    </summary>
    
    
    
      <category term="查漏补缺 优先级 const" scheme="http://yoursite.com/tags/%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA-%E4%BC%98%E5%85%88%E7%BA%A7-const/"/>
    
  </entry>
  
  <entry>
    <title>const_cast issue</title>
    <link href="http://yoursite.com/2020/06/11/const-cast-issue/"/>
    <id>http://yoursite.com/2020/06/11/const-cast-issue/</id>
    <published>2020-06-11T05:51:58.000Z</published>
    <updated>2020-06-11T05:51:58.362Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>std::make_pair</title>
    <link href="http://yoursite.com/2020/06/10/std-make-pair/"/>
    <id>http://yoursite.com/2020/06/10/std-make-pair/</id>
    <published>2020-06-10T09:48:39.000Z</published>
    <updated>2020-06-10T10:06:51.348Z</updated>
    
    <content type="html"><![CDATA[<h1 id="std-make-pair"><a href="#std-make-pair" class="headerlink" title="std::make_pair"></a>std::make_pair</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;std-make-pair&quot;&gt;&lt;a href=&quot;#std-make-pair&quot; class=&quot;headerlink&quot; title=&quot;std::make_pair&quot;&gt;&lt;/a&gt;std::make_pair&lt;/h1&gt;
      
    
    </summary>
    
    
    
      <category term="std::make_pair" scheme="http://yoursite.com/tags/std-make-pair/"/>
    
  </entry>
  
  <entry>
    <title>std::regex Error record</title>
    <link href="http://yoursite.com/2020/06/10/std-regex-Error-record/"/>
    <id>http://yoursite.com/2020/06/10/std-regex-Error-record/</id>
    <published>2020-06-10T09:42:26.000Z</published>
    <updated>2020-06-10T09:47:48.760Z</updated>
    
    <content type="html"><![CDATA[<p>当时运行执行std::regex的时候出现如下问题：一开始以为是正则表达式不对之后查询发现是gcc版本问题。</p><p>报错信息如下：</p><pre><code class="CQL">The error message is:terminate called after throwing an instance of &#39;std::regex_error&#39;what(): regex_errorAbortedI bisected it to commit 36b945</code></pre><p>原因如下：</p><p>You need at <a href="https://stackoverflow.com/questions/12530406/is-gcc-4-8-or-earlier-buggy-about-regular-expressions" target="_blank" rel="noopener">least gcc 4.9</a> to make regexps work with gcc,。</p><p>因为服务器中此时的gcc版本是4.8因此因为gcc版本问题出现如上问题</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;当时运行执行std::regex的时候出现如下问题：一开始以为是正则表达式不对之后查询发现是gcc版本问题。&lt;/p&gt;
&lt;p&gt;报错信息如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;CQL&quot;&gt;The error message is:
terminate called a
      
    
    </summary>
    
    
    
      <category term="std::regex" scheme="http://yoursite.com/tags/std-regex/"/>
    
  </entry>
  
  <entry>
    <title>CUDA 执行模型</title>
    <link href="http://yoursite.com/2020/06/09/CUDA-%E6%89%A7%E8%A1%8C%E6%A8%A1%E5%9E%8B/"/>
    <id>http://yoursite.com/2020/06/09/CUDA-%E6%89%A7%E8%A1%8C%E6%A8%A1%E5%9E%8B/</id>
    <published>2020-06-09T15:02:40.000Z</published>
    <updated>2020-06-09T23:59:50.773Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CUDA-执行模型"><a href="#CUDA-执行模型" class="headerlink" title="CUDA  执行模型"></a>CUDA  执行模型</h1><p>目标理解关于cuda中关于其模型内部架构等方面</p><p>GPU 中的有多SM 每个SM 单元能支持数百个线程的并发执行，所以一个GPU上并发执行数千个线程是有可能的。当启动一个内核网格时，它的线程被分配到可用的SM上进行执行，线程快一旦被调度到SM上，其中的线程只会在那个指定的SM上并发执行，多个线程块可能被分配到一个SM上，而且是根据SM资源的可用性调度的。同一个线程中的指令利用指令级并行进行流水线化。</p><p>CUDA 是采用单指令多线程（SIMY）架构来管理和执行线程。SIMT 中每个线程束中的所有线程在相同的程序地址上可以同时的开始执行，但是单独的线程任然有可能又不同的行为。（可以确保可以编写独立的线程并行代码）</p><p>在SIMT 中每个线程都：</p><ol><li><u><strong>有独立的执行路径</strong></u></li><li><u><strong>有自己的指令地址计数器</strong></u></li><li><u><strong>有自己的寄存器状态</strong></u></li></ol><p>线程束是（warp）一个32个线程为一组的，warp里每个线程都是可以同时执行相同的指令。每个线程都有自己的指令地址计数器和寄存器状态，并利用自身的数据执行当前的指令。每个SM都将分配给它的线块分配到32个warp中，然后再可用户的硬件资源上调度执行。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CUDA-执行模型&quot;&gt;&lt;a href=&quot;#CUDA-执行模型&quot; class=&quot;headerlink&quot; title=&quot;CUDA  执行模型&quot;&gt;&lt;/a&gt;CUDA  执行模型&lt;/h1&gt;&lt;p&gt;目标理解关于cuda中关于其模型内部架构等方面&lt;/p&gt;
&lt;p&gt;GPU 中的有多S
      
    
    </summary>
    
    
    
      <category term="CUDA 执行模型" scheme="http://yoursite.com/tags/CUDA-%E6%89%A7%E8%A1%8C%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>信号学习</title>
    <link href="http://yoursite.com/2020/06/05/%E4%BF%A1%E5%8F%B7%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2020/06/05/%E4%BF%A1%E5%8F%B7%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-06-05T14:36:17.000Z</published>
    <updated>2020-06-13T03:50:39.806Z</updated>
    
    <content type="html"><![CDATA[<h2 id="信号的概念："><a href="#信号的概念：" class="headerlink" title="信号的概念："></a>信号的概念：</h2><p>​      信号是一个通知，通知进程进程发生了某些事情。信号是突然发生的所以是<strong>*<u>异步发生</u>*</strong>的。信号的产生：由一个进程发送给另一个进程，或者由内核（可理解为操作系统）发送给进程。例如ctrl+c 这种中断信号或者内存越界等问题。</p><p>​     信号的名字都是由SIG开头的。 信号是一些正整数常量在linux 系统中是与宏的形式存在，宏在signal.h 中（user/include中。</p><p>​       gcc 编译的时候文件头文件的的搜索顺序是从 1./usr/local/include      2.  /usr/inclu当要包括库文件的时候连接路径：/usr/local/lib 然后    /usr/lib 路径下去寻找 </p><p>kill 命令（发送一个信号给进程）</p><p>kill 能给进程发送多种信号，当单独发送kill命令的时候一般为中止信号。</p><p>kill 的默认缺省动作（程序中不进行处理的化大部分是）是干掉进程</p><p>信号sigkill 和sigstop 是不能被忽略的无法让用户自己定义信号方式的。</p><p>信号的三个动作</p><ol><li>信号的缺省动作一般是杀死这个进程</li><li>忽视此此动作（可以在代码中忽视）但SIGKILL 和SIGSTOP是不能被忽视的</li><li>捕捉信号可以捕捉信号重写写处理函数，但是SIGKILL 和SIGSTOP 是不能捕捉处理的。</li></ol><p>​                  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;信号的概念：&quot;&gt;&lt;a href=&quot;#信号的概念：&quot; class=&quot;headerlink&quot; title=&quot;信号的概念：&quot;&gt;&lt;/a&gt;信号的概念：&lt;/h2&gt;&lt;p&gt;​      信号是一个通知，通知进程进程发生了某些事情。信号是突然发生的所以是&lt;strong&gt;*&lt;u&gt;异步
      
    
    </summary>
    
    
    
      <category term="信号学习" scheme="http://yoursite.com/tags/%E4%BF%A1%E5%8F%B7%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>hash 索引</title>
    <link href="http://yoursite.com/2020/06/03/hash-%E7%B4%A2%E5%BC%95/"/>
    <id>http://yoursite.com/2020/06/03/hash-%E7%B4%A2%E5%BC%95/</id>
    <published>2020-06-03T03:47:54.000Z</published>
    <updated>2020-06-03T03:47:54.700Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>cuda</title>
    <link href="http://yoursite.com/2020/06/01/cuda/"/>
    <id>http://yoursite.com/2020/06/01/cuda/</id>
    <published>2020-06-01T05:50:33.000Z</published>
    <updated>2020-06-03T14:30:00.947Z</updated>
    
    <content type="html"><![CDATA[<p>CUDA </p><h2 id="CUDA的线程模型："><a href="#CUDA的线程模型：" class="headerlink" title="CUDA的线程模型："></a>CUDA的线程模型：</h2><p><img src="/2020/06/01/cuda/%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B.jpg" alt="你想输入的替代文字"></p><p>如图可以看到，每个线程有自己的私有本地内存（Local Memory），而每个线程块有包含共享内存（Shared Memory）,可以被线程块中所有线程共享，其生命周期与线程块一致。此外，所有的线程都可以访问全局内存（Global Memory）。还可以访问一些只读内存块：常量内存（Constant Memory）和纹理内存（Texture Memory）。内存结构涉及到程序优化，这里不深入探讨它们。</p><p><strong><em>在vector（矢量相加的时候）计算出每个线程索引的目的是为了指定每个线程负责处理每个位置的两个元素相加</em></strong>，从上面的图中更容易能理解。通过相关计算算出tid 比如是第一个Thread(0,0)的地址的时候会从相关的内存如Global Memory 中去那相对应的小标的数据放到自己的线程中去执行。</p><h2 id="关于GPU-核调用"><a href="#关于GPU-核调用" class="headerlink" title="关于GPU 核调用"></a>关于GPU 核调用</h2><p>1.add&lt;&lt;&lt;N,1&gt;&gt;&gt; （）代表 N 代表启动的并行线程快 ，1代表在CUDA运行时在每个线程快中创建的线程的数量。</p><p>2.总共启动的线程数量公式如下</p><p>N 个线程快* 1个线程/线程快 = N个并行线程</p><p>3.在GPU中硬件会将线程快的数量限制为不超过65535，最大的线程数量是不超过设备属性结构中的maxThreadsPerBlock域的值，一般对于当前的处理器而言这个线程快是512个线程。因此当超过这个线程的计算的时候要将线程和线程块结合起来才能实现。</p><p>4.在其中每个块中的线程不能超过512个最大线程限制，所以当要并行执行的线程数N 大于512时候就需要进行分块和分线程配合使用。有一种方法是固定每个块中线程的数目然后通过，比如限制每一个线程块的线程为128则此时可以计算出有多少个线程块，通过N/128 就可以计算出线程块，这样就能启动了N个线程同时运行。当然当N = 127 则代表0个线程为了避免这个问题可以<strong><u>（N+127）/128</u></strong> 的方式相当于求出大于等于N的128最小倍数，采用这个公式计算出线程块。（调用时候 kern &lt;&lt;&lt;(（N+127）/128,128)&gt;&gt;&gt;）();)</p><p>​    但是有时候N很大时候会开启过多的线程则此时需要管理取的线程如下：</p><pre><code class="c++"> //如果启动N个线程： int tid = threadIdx.x + blockIdx.x * blockDim.x;    //可以通过tid 取得的线程数来进行去线程的控制 tid 代表已经开了几个线程并行了 if(tid &lt; N)               //代表如果当前的取得的线程数目&lt; 总共要启动的线程数字N      c[tid] = a[tid] + b[tid];</code></pre><h2 id="问题：为什么需要计算线索引：下面的两个函数有区别嘛"><a href="#问题：为什么需要计算线索引：下面的两个函数有区别嘛" class="headerlink" title="问题：为什么需要计算线索引：下面的两个函数有区别嘛"></a>问题：为什么需要计算线索引：下面的两个函数有区别嘛</h2><pre><code class="cuda">  __global__ void add(int *a, int *b, int *c){      int tid = blockIdx.x;            //why should tid?        if(tid &lt; N)                            c[tid] = a[tid] + b[tid];        //tid is must?    }  int count_dev = 0; __global__ void add(int *a, int *b, int *c){      int tid = blockIdx.x;            //why should tid?        if(count_dev&lt; N)                            c[count_dev] = a[count_dev] + b[count_dev];        //tid is must?      count_dev ++;}</code></pre><h2 id="问题：关于tid-blockDim-x-gridDim-x-的使用是什么情况"><a href="#问题：关于tid-blockDim-x-gridDim-x-的使用是什么情况" class="headerlink" title="问题：关于tid += blockDim.x * gridDim.x 的使用是什么情况"></a>问题：关于tid += blockDim.x * gridDim.x 的使用是什么情况</h2><p><img src="/2020/06/01/cuda/1.png" alt="你想输入的替代文字"></p><pre><code></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;CUDA &lt;/p&gt;
&lt;h2 id=&quot;CUDA的线程模型：&quot;&gt;&lt;a href=&quot;#CUDA的线程模型：&quot; class=&quot;headerlink&quot; title=&quot;CUDA的线程模型：&quot;&gt;&lt;/a&gt;CUDA的线程模型：&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/2020/06/01/cud
      
    
    </summary>
    
    
    
      <category term="CUDA" scheme="http://yoursite.com/tags/CUDA/"/>
    
  </entry>
  
  <entry>
    <title>可变参数宏</title>
    <link href="http://yoursite.com/2020/06/01/%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0%E5%AE%8F/"/>
    <id>http://yoursite.com/2020/06/01/%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0%E5%AE%8F/</id>
    <published>2020-06-01T03:02:14.000Z</published>
    <updated>2020-06-01T03:10:54.726Z</updated>
    
    <content type="html"><![CDATA[<p>为了在linux 打印输出调试定义了一个基于printf的简单的宏定义如下：</p><pre><code class="c++">#define IS_DEBUG 0 //日志输出开关,当设置为0时,是关闭#if(IS_PR)#define  J_PR(format, ...) \printf(&quot;FUNCTION:&quot; __FUNCTION__&quot; LINE: %d: &quot;format&quot;&quot;, __LINE__, ##__VA_ARGS__)#else#define  J_PR(format, ...)#endif</code></pre><p>说明：##<em>VA_ARGS</em> _  其中##意思是，如果可变参数被忽略或为空，将使预处理器（ preprocessor ）去除掉它前面的那个逗号。</p><p>format 代替的是如下结构</p><p>（%s\n,”test”）;  ————-  format is “%s\n” and   可变参数宏_VA_ARGS  is “test”</p><p>(“test”)  ;            ————— format ===”test” and  可变参数宏 is== empty </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;为了在linux 打印输出调试定义了一个基于printf的简单的宏定义如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;c++&quot;&gt;#define IS_DEBUG 0 //日志输出开关,当设置为0时,是关闭

#if(IS_PR)
#define  J_PR(format
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>sql索引</title>
    <link href="http://yoursite.com/2020/05/27/sql%E7%B4%A2%E5%BC%95/"/>
    <id>http://yoursite.com/2020/05/27/sql%E7%B4%A2%E5%BC%95/</id>
    <published>2020-05-27T03:08:27.000Z</published>
    <updated>2020-05-27T08:13:49.473Z</updated>
    
    <content type="html"><![CDATA[<h2 id="索引："><a href="#索引：" class="headerlink" title="索引："></a>索引：</h2><ul><li>在数据库中想要查询某一个条件如</li></ul><p>typedef  与 typenam</p><pre><code class="c++">typedef  unsigned  char  uchar;typedef  uchar  uint8;typedef   uint8  TFlowPortId;typedef  unsigned  short  ushort;typePOINTdef  ushort  uint16;typedef  uint16  TFlowNodeId;typedef  unsigned  int   uint;typedef  uint  uint32;</code></pre><p>_finddata_t    &lt;io.h&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;索引：&quot;&gt;&lt;a href=&quot;#索引：&quot; class=&quot;headerlink&quot; title=&quot;索引：&quot;&gt;&lt;/a&gt;索引：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在数据库中想要查询某一个条件如&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;typedef  与 typenam&lt;/p&gt;
&lt;pre&gt;&lt;c
      
    
    </summary>
    
    
    
      <category term="索引 (Indxe)" scheme="http://yoursite.com/tags/%E7%B4%A2%E5%BC%95-Indxe/"/>
    
  </entry>
  
  <entry>
    <title>flex bison</title>
    <link href="http://yoursite.com/2020/05/24/flex-bison/"/>
    <id>http://yoursite.com/2020/05/24/flex-bison/</id>
    <published>2020-05-24T04:16:15.000Z</published>
    <updated>2020-05-24T14:45:49.454Z</updated>
    
    <content type="html"><![CDATA[<h1 id="bison-功能"><a href="#bison-功能" class="headerlink" title="bison : 功能"></a>bison : 功能</h1><p> bison和flex配合使用，可以将用户提供的语法规则转化为一个<strong><em>语法分析器</em></strong>。  <strong>bison的作用</strong>：通过产生式多次构造，最终得到一个动作表，然后利用这个动作表去解析句子。bison读取用户提供的语法产生式，生成一个C语言格式的动作表，并将其包含进一个名为<strong>yyparse()</strong>的C函数，这个函数的作用是利用这个动作表来解析token流，这个token流是由flex生成的词法分析器扫描源程序得到。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;bison-功能&quot;&gt;&lt;a href=&quot;#bison-功能&quot; class=&quot;headerlink&quot; title=&quot;bison : 功能&quot;&gt;&lt;/a&gt;bison : 功能&lt;/h1&gt;&lt;p&gt; bison和flex配合使用，可以将用户提供的语法规则转化为一个&lt;strong&gt;&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>inline const mutable this static </title>
    <link href="http://yoursite.com/2020/05/16/inline%20const%20mutable%20this%20static%20/"/>
    <id>http://yoursite.com/2020/05/16/inline%20const%20mutable%20this%20static%20/</id>
    <published>2020-05-16T01:00:00.465Z</published>
    <updated>2020-05-19T08:03:10.886Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Const"><a href="#1-Const" class="headerlink" title="1.Const:"></a>1.Const:</h2><p>  1.1Const 在函数后面时候：表示这个函数不能更改类中的内容也就是成员变量。</p><p>  1.2 定义Const 对象： 只能调用Const 函数，非Const对象可以调用Const 函数和非Const 函数</p><h2 id="1-3-mutable（不稳定-容易改变的意思）与Const-相反-定义了mutable-成员函数-则const-成员函数中就能修改此成员函数"><a href="#1-3-mutable（不稳定-容易改变的意思）与Const-相反-定义了mutable-成员函数-则const-成员函数中就能修改此成员函数" class="headerlink" title="1.3 mutable（不稳定 容易改变的意思）与Const 相反 定义了mutable 成员函数 则const 成员函数中就能修改此成员函数"></a>1.3 mutable（不稳定 容易改变的意思）与Const 相反 定义了mutable 成员函数 则const 成员函数中就能修改此成员函数</h2><h2 id="2-this"><a href="#2-this" class="headerlink" title="2.this :"></a>2.this :</h2><p>2.1this  编译器负责把这个对象的地址传递给这个成员函数中的一个隐藏的this形参。对于系统来说关于成员的调用都是通过this来调用的是会是一种隐式调用。在普通函数中this相当于指向非const对象的const 指针（const * this）而在const 函数中代表（const Time *const 的this 类型的指针）</p><pre><code class="c++">//如下：class Time{    void add_hour(int h);};Time mytime;mytime.add_hour(&amp;mytime,3)  //传递的时候系统会默认传递一个当前的指针回去作为this指针                            //this 是一个系统的保留关键字不可显示调用.                            //静态函数和全局函数是不能使用this指针的</code></pre><h2 id="3-static"><a href="#3-static" class="headerlink" title="3.static"></a>3.static</h2><p>​    3.1局部静态变量和全局静态变量都保存在静态存储区都是默认不赋予初值的话系统会给予初值0.</p><p>​     3.2static 类成员  存在与整个类中 调用的时候是类名：：static成员变量名或者类名.static成员变量进行操作</p><p>​    3.3 static 类函数  调用是 类名：：static 类函数或者 类名.static 类函数 都可以使用。在静态成员函数中是不能修改非静态成员的值的</p><p>​     3.4类中的static声明了后要在cpp 中定义静态成员变量（在此时分配内存只能在一个cpp 中定义那不然重复定义）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-Const&quot;&gt;&lt;a href=&quot;#1-Const&quot; class=&quot;headerlink&quot; title=&quot;1.Const:&quot;&gt;&lt;/a&gt;1.Const:&lt;/h2&gt;&lt;p&gt;  1.1Const 在函数后面时候：表示这个函数不能更改类中的内容也就是成员变量。&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
